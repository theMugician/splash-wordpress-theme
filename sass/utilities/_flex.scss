.flex {
  display: flex;

  &__align-center {
      margin: auto;
      align-self: center;
  }
  
  &__align-left {
      margin-right: auto;
      align-self: center;
  }
  
  &__align-right {
      margin-left: auto;
      align-self: center;
  }
  
  &__align-x-center {
      margin-right: auto;
      margin-left: auto;
  }
  
  &__align-x-left {
      margin-right: auto;
  }
  
  &__align-x-right {
      margin-left: auto;
  }
  
  &__align-y-center {
      align-self: center;
  }
  
  &__align-y-top {
      align-self: flex-start;
  }
  
  &__align-y-bottom {
      align-self: flex-end;
  }
}


/*  FLEX ITEM
    Summary:    a shorthand property specifying the ability of a flex item to alter
                its dimensions to fill available space. Summarizes {flex-grow, flex-shrink, flex-basis }
    Reference:  https://developer.mozilla.org/en-US/docs/Web/CSS/flex
    Default:    0 1 0;
*/
.flexed-item {
  flex: 1 1 0;
}
.flexed-item--auto {
  flex: 1 1 auto;
}
/*  DIRECTION ( ORIENTATION )  -------------------------------------------------
    Summary:    specifies how flex items are placed in the flex container defining
                the main axis and the direction (normal or reversed).
    Options:
        Column: set main axis to vertical
        Row :   set main axis to horizontal
    Reference:  https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction
    Default:    flex-direction: row;
*/
.flex__column {
          flex-direction: column ;
}
.flex__row {
          flex-direction: row;
}
/*  JUSTIFICATION (Main axis)   ------------------------------------------------
    Summary:    defines how the browser distributes space between and around flex
    items along the main-axis of their container.
    Reference:  https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
    Default:    justify-content: flex-start;
*/
/* Pack items around the center */
.flex__content-center {
        justify-content: center;
}
/* Pack flex items from the start  */
.flex__content-start {
        justify-content: flex-start;
}
/* Pack items from the end */
.flex__content-end {
        justify-content: flex-end;
}
/* Distribute items evenly,
    The first item at the start, the last at the end */
.flex__content-between {
        justify-content: space-between;
}
/* Distribute items evenly
    Items have equal space around them */
.flex__content-around {
      justify-content: space-around;
}
/*
    ALIGN CONTENT ( Cross axis )  ----------------------------------------------
    Summary:   aligns a flex container's lines within the flex container when
               there is extra space on the cross-axis.
    Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/align-content
    Default:   align-content: flex-start;
*/
/* Pack lines from the cross-axis start */
.flex__align-content-start {
      align-content: flex-start;
}
/* Pack lines to the cross-axis end */
.flex__align-content-end {
      align-content: flex-end;
}
/* Pack lines around the cross-axis center */
.flex__align-content-center {
      align-content: center;
}
/* Distribute lines along the cross-axis, start to end */
.flex__align-content-between {
      align-content: space-between;
}
/* Distribute lines along the cross-axis, equally spaced */
.flex__align-content-around {
      align-content: space-around;
}
/* Stretch lines to occupy the whole cross-axis */
.flex__align-content-stretch {
      align-content: stretch;
}
/*
    ALIGN ITEMS ( Cross axis )  ------------------------------------------------
    Summary:   aligns flex items of the current flex line the same way as
               justify-content but in the perpendicular direction.
    Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
    Default:   align-items: stretch;
*/
/* Center items in the cross-axis */
.flex__align-items-center {
        align-items: center;
}
/* Align to cross-start */
.flex__align-items-start {
        align-items: flex-start;
}
/* Align to cross-end */
.flex__align-items-end {
        align-items: flex-end;
}
/* Align the items' baselines */
.flex__align-items-baseline {
        align-items: baseline;
}
/* Stretch the items to fit
    DEFAULT VALUE  */
.flex__align-items-stretch {
        align-items: stretch;
}
/*
    ALIGN SELF ( Cross axis )  ------------------------------------------------
    Summary:   aligns flex items of the current flex line overriding the align-items value.
    Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/align-self
    Default:   align-self: auto;
*/
/*  Computes to parent's align-items value or stretch if the element has no parent.  */
.flex__align-self-auto {
      align-self: auto;
}
/*  Cross-start margin edge of the flex item is flushed with the cross-start edge of the line.  */
.flex__align-self-start {
      align-self: flex-start;
}
/*  Cross-end margin edge of the flex item is flushed with the cross-end edge of the line.  */
.flex__align-self-end {
      align-self: flex-end;
}
/* Flex item's margin box is centered within the line on the cross-axis.
    If the cross-size of the item is larger than the flex container, it will
    overflow equally in both directions.  */
.flex__align-self-center {
      align-self: center;
}
/*  All flex items are aligned such that their baselines align. The item with
    the largest distance between its cross-start margin edge and its baseline is
    flushed with the cross-start edge of the line.  */
.flex__align-self-baseline {
      align-self: baseline;
}
/*  Flex items are stretched such as the cross-size of the item's margin box is
    the same as the line while respecting width and height constraints.  */
.flex__align-self-stretch {
      align-self: stretch;
}
/*
    WRAPPING -------------------------------------------------------------------
    Summary:   specifies whether flex items are forced into a single line or can
               be wrapped onto multiple lines. If wrapping is allowed, this property
               also enables you to control the direction in which lines are stacked.
    Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap
    Default:   flex-wrap: nowrap;
*/
.flex__no-wrap {
    flex-wrap: nowrap;
}
.flex__reverse-wrap {
    flex-wrap: wrap-reverse;
}
.flex__wrap {
    flex-wrap: wrap;
}
/*
    VISUAL ORDER ---------------------------------------------------------------
    Summary:   specifies the order used to lay out flex items in their flex container.
               Elements are laid out in the ascending order of the order value.
               Elements with the same order value are laid out in the order in
               which they appear in the source code.
    Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/order
    Default:   order: 0; { no order }
*/
.flex__order-one {
  -webkit-order: 1;
  order: 1;
}
.flex__order-two {
  -webkit-order: 2;
  order: 2;
}
.flex__order-three {
  -webkit-order: 3;
  order: 3;
}
